/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package musicclient;

import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.embed.swing.JFXPanel;
import java.io.File;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL
 */
public class frmMusic extends javax.swing.JInternalFrame {
    private String path="";
    private MediaPlayer mediaPlayer;
    private List<String> musicFiles = new ArrayList<>();
    private int currentIndex = -1;
    
    /**
     * Creates new form frmMusic
     */
    static {
        new JFXPanel();
    }
    public frmMusic() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fchMusic = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        btnBrowse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstMusicFolder = new javax.swing.JList<>();
        btnStop = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        volumeSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        MusicPB = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Trình chơi nhạc");

        jLabel1.setText("Thư mục của bạn");

        btnBrowse.setText("Chọn");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstMusicFolder);

        btnStop.setText("Dừng");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnPlay.setText("Phát");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnPause.setText("Tạm Dừng");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnPrevious.setText("Trước");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setText("Sau");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeSliderStateChanged(evt);
            }
        });

        jLabel3.setText("100");

        jLabel4.setText("0");

        MusicPB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MusicPBMousePressed(evt);
            }
        });

        jLabel5.setText("00:00");

        jLabel6.setText("00:00");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 51));
        jLabel7.setText("Chưa chọn thư mục!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBrowse))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3))
                                .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnPrevious)
                                .addGap(18, 18, 18)
                                .addComponent(btnNext)
                                .addGap(19, 19, 19)))
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(MusicPB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(btnStop)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnPlay)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnPause))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6)))
                            .addComponent(jLabel7))
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MusicPB, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStop)
                            .addComponent(btnPlay)
                            .addComponent(btnPause))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPrevious)
                            .addComponent(btnNext))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(95, 95, 95)
                        .addComponent(jLabel7))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        this.fchMusic.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(this.fchMusic.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            try{
                path=this.fchMusic.getSelectedFile().getCanonicalPath();
                File dir=new File(path);
                File dsFile[]=dir.listFiles();
                if(dsFile==null)
                JOptionPane.showMessageDialog(null, "Đường dẫn không đúng hoặc không phải thư mục!");
                else{
                    String[] supportedExtensions = {".mp3", ".wav", ".ogg", ".aac", ".flac", ".m4a"};
                    DefaultListModel dm=new DefaultListModel();
                    musicFiles.clear();
                    for (File file : dsFile) {
                        String filename = file.getName();
                        for (String ext : supportedExtensions) {
                            if (filename.endsWith(ext)) {
                                musicFiles.add(file.getAbsolutePath());
                                dm.addElement(filename);
                                break;
                            }
                        }
                    }
                    this.lstMusicFolder.setModel(dm);
                    if (!musicFiles.isEmpty()) {
                        lstMusicFolder.setSelectedIndex(0);
                        currentIndex = 0;
                        jLabel7.setVisible(false);
                    }else
                        jLabel7.setText("Thư mục rỗng!");
                }
            }catch(Exception ex){
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        int selectedIndex = lstMusicFolder.getSelectedIndex();
        if (selectedIndex >= 0) {
            currentIndex = selectedIndex;
            playMusic();
        }
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        if (mediaPlayer != null) {
            mediaPlayer.pause();
        }
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        if (mediaPlayer != null) {
            mediaPlayer.stop();
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        if (currentIndex > 0) {
            currentIndex--;
            lstMusicFolder.setSelectedIndex(currentIndex);
            playMusic();
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if (currentIndex < musicFiles.size() - 1) {
            currentIndex++;
            lstMusicFolder.setSelectedIndex(currentIndex);
            playMusic();
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
        if (mediaPlayer != null) {
            double volume = volumeSlider.getValue() / 100.0;
            mediaPlayer.setVolume(volume);
        }
    }//GEN-LAST:event_volumeSliderStateChanged

    private void MusicPBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MusicPBMousePressed
        int mouseX = evt.getX();
        int progressBarWidth = MusicPB.getWidth();
        int newValue = (int) ((mouseX / (double) progressBarWidth) * MusicPB.getMaximum());
        MusicPB.setValue(newValue);
        if (mediaPlayer != null) {
            mediaPlayer.seek(javafx.util.Duration.millis(newValue));
        }
    }//GEN-LAST:event_MusicPBMousePressed

    private void playMusic() {
        if (currentIndex >= 0 && currentIndex < musicFiles.size()) {
            if (mediaPlayer != null) {
                mediaPlayer.stop();
            }
            Media media = new Media(new File(musicFiles.get(currentIndex)).toURI().toString());
            mediaPlayer = new MediaPlayer(media);
            double volume = volumeSlider.getValue() / 100.0; 
            mediaPlayer.setVolume(volume);
            mediaPlayer.setOnReady(() -> {
                javafx.util.Duration totalDuration = mediaPlayer.getTotalDuration();
                long totalSeconds = (long) totalDuration.toSeconds();
                String formattedTime = formatDuration(totalSeconds);
                jLabel6.setText(formattedTime);
                MusicPB.setMaximum((int) totalDuration.toMillis());
            });
            mediaPlayer.currentTimeProperty().addListener((observable, oldValue, newValue) -> {
                int currentTime = (int) newValue.toMillis();
                MusicPB.setValue(currentTime);
                MusicPB.setString(String.format("%d%%", (int) ((currentTime / (double) MusicPB.getMaximum()) * 100)));
                long currentSeconds = (long) newValue.toSeconds();
                String formattedCurrentTime = formatDuration(currentSeconds);
                jLabel5.setText(formattedCurrentTime);
            });
            mediaPlayer.play();
        }
    }
    
    private String formatDuration(long totalSeconds) {
        int hours = (int) (totalSeconds / 3600);
        int minutes = (int) ((totalSeconds % 3600) / 60);
        int seconds = (int) (totalSeconds % 60);
        if (hours > 0) {
            return String.format("%02d:%02d:%02d", hours, minutes, seconds);
        } else {
            return String.format("%02d:%02d", minutes, seconds);
        }
    }
    
    public void setMusicFiles(Map<String, String> files) {
        musicFiles.clear();
        DefaultListModel<String> model = new DefaultListModel<>();
        for (String fileName : files.keySet()) {
            musicFiles.add("D:/NetBeansProjects/quanlytaikhoan/admin/"+fileName);
            model.addElement(fileName);
        }
        lstMusicFolder.setModel(model);
        if (!files.isEmpty()) {
            lstMusicFolder.setSelectedIndex(0);
            currentIndex = 0;
            jLabel7.setVisible(false);
        } else {
            jLabel7.setText("Thư mục rỗng!");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar MusicPB;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnStop;
    private javax.swing.JFileChooser fchMusic;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstMusicFolder;
    private javax.swing.JSlider volumeSlider;
    // End of variables declaration//GEN-END:variables

    
}
